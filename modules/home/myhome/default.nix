{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.default-home;
  inherit (config.snowfallorg) user;
  aliases = pkgs.callPackage ./aliases.nix {inherit pkgs lib config;};
  # Ref: https://github.com/phip1611/nixos-configs/blob/main/common/modules/user-env/env/cargo.nix
  # List of binaries to create a symlink to in `~/.cargo/bin`.
  # From my testing, adding "cargo" and "rustc" should be enough, but better
  # be safe.
  cargoSymlinkBins = [
    "cargo"
    "cargo-clippy"
    "rustc"
    "rustdoc"
    "rustfmt"
    "rustup"
  ];

  # Function that creates a list of cargo symlinks for the home-manager.
  createCargoBinSymlinks = mkOutOfStoreSymlink: bins:
    builtins.foldl'
    (acc: bin:
      {
        ".cargo/bin/${bin}".source = mkOutOfStoreSymlink "/etc/profiles/per-user/${cfg.username}/bin/${bin}";
      }
      // acc)
    {} # accumulator
    
    bins;

  dummyCargoEnvFile = pkgs.writeText "dummy-cargo-env-file.sh" ''
    # Dummy cargo env file generated by NixOS/home-manager.
    # This is only here so that scripts that expect this standard path to be
    # available don't fail. One example are the scripts in the cloud-hypervisor
    # repository, which source this file.
  '';
in
  with lib; {
    options.default-home = with types; {
      username = mkOption {
        type = str;
        description = "Username";
        default = user.name;
      };
      git = {
        email = mkOption {
          type = str;
          description = "Email to use in git config";
        };
        username = mkOption {
          type = str;
          description = "Username to use in git config";
        };
      };
      isThatOneWeirdMachine = mkEnableOption "IYKYK";
    };
    config = {
      nix.extraOptions = "keep-going = true";
      # TODO: Remember what the f*** this fixes and update this comment
      xdg.systemDirs = mkIf pkgs.stdenv.isLinux {
        data = ["$HOME/.nix-profile/share"];
      };

      # TODO: Uncomment when home-manager is recent enough to use
      # services.home-manager.autoExpire = {
      #   enable = true;
      #   store.cleanup = true;
      # };
      programs = {
        readline.enable = true;
        readline.extraConfig = "set enable-bracketed-paste off";
        ripgrep = {
          enable = true;
          # Session variable RIPGREP_CONFIG_PATH doesn't actually get set this way,
          #   meaning this doesn't work and then clashes with my manual implementation.
          # arguments = [
          #   "--glob='!*.svg'"
          # ];
        };
        alacritty = {
          enable = true;
          package = lib.mkIf (!pkgs.stdenv.hostPlatform.isDarwin) (pkgs.callPackage ./alacritty-patched.nix {inherit pkgs;});
          settings = {
            window.option_as_alt = "Both";
            general.live_config_reload = true;
            font.size = 14;
            font.normal.family = "FiraCode Nerd Font";
            terminal.shell.program = "zellij";
            keyboard.bindings = let
              zeroKeyReset = {
                key = "Zero";
                mods = "Control";
                action = "ResetFontSize";
              };
            in
              [
                {
                  key = "Equals";
                  mods = "Control";
                  action = "IncreaseFontSize";
                }
                {
                  key = "Minus";
                  mods = "Control";
                  action = "DecreaseFontSize";
                }
              ]
              ++ lib.optional (!cfg.isThatOneWeirdMachine && pkgs.stdenv.isAarch64) zeroKeyReset;
          };
        };
        zellij = {
          enable = true;
          enableBashIntegration = true;
          enableZshIntegration = true;
          settings = {};
        };
        starship = {
          enable = true;
          enableBashIntegration = true;
          enableZshIntegration = true;
        };
        # Let Home Manager install and manage itself.
        home-manager.enable = true;
        # TODO: Look at disabling when comfortable
        bash = {
          enable = true;
          enableCompletion = true;
        };
        zoxide = {
          enable = true;
          enableBashIntegration = true;
          enableZshIntegration = true;
        };
        bat.enable = true;
        command-not-found.enable = true;
        direnv = {
          enable = true;
          enableBashIntegration = true;
          enableZshIntegration = true;
          nix-direnv.enable = true;
          config.global = {
            load_dotenv = true;
            silent = true;
          };
          config.whitelist = {
            prefix = [
              "~/repos/bne"
              "~/repos/*/arichtman"
              "~/repos/gl"
              "~/repos/core"
            ];
          };
        };
        fzf = {
          enable = true;
          enableBashIntegration = true;
          enableZshIntegration = true;
        };
        gpg.enable = true;
        htop.enable = true;
        jq.enable = true;
        less.enable = true;
        jujutsu = {
          enable = true;
          settings = {
            user = {
              name = "Ariel Richtman";
              email = "ariel@richtman.au";
            };
            ui = {
              default-command = "status";
              editor = "hx";
              paginate = "never";
              # pager = "bat";
              # TODO: configure mergiraf for JJ
              diff.tool = "delta";
              merge-editor = "mergiraf";
            };
            merge-tools = {
              mergiraf = {
                merge-args = ["merge" "--output" "$output" "$base" "$left" "$right"];
              };
              delta = {
                # Ref: https://github.com/jj-vcs/jj/issues/5250
                diff-args = ["--line-numbers" "$left" "$right"];
                diff-expected-exit-codes = [1];
              };
            };
            signing = {
              behaviour = "own";
              backend = "ssh";
              key = "~/.ssh/id_ed25519.pub";
            };
            git = {
              sign-on-push = true;
            };
            "--scope" = [
              {
                "--when" = {
                  repositories = ["~/repos/gl/"];
                };
                user = {
                  email = "ariel.richtman@silverrailtech.com";
                };
              }
              {
                "--when" = {
                  repositories = ["~/repos/cb/"];
                };
                user = {
                  email = "ariel@richtman.au";
                };
              }
              {
                "--when" = {
                  commands = ["diff"];
                };
                ui = {
                  paginate = "auto";
                };
              }
            ];
          };
        };
        git = {
          enable = true;
          delta.enable = true;
          userEmail = cfg.git.email;
          userName = cfg.git.username;
          aliases = {
            c = "commit";
            co = "checkout";
            s = "status";
            b = "branch";
            S = "switch";
            d = "diff";
            f = "fetch";
            bl = "blame";
            xclean = "clean --force -x --exclude '.env'";
          };
          ignores = lib.arichtman.sourceGitignoreList {
            languages = ["hugo" "rust" "linux" "macos" "csharp" "direnv" "python" "windows" "terraform" "dotnetcore" "terragrunt" "rust-analyzer" "node" "yarn"];
            hash = "12gswbdnlsx1gzqxns6s6nzsc0kkvnprr44abc1v8l6in8rjyj57";
            filterFunction = x: x != "Cargo.lock";
          };
          attributes = import ./git/attributes.nix;
          signing = {
            signByDefault = true;
            key = "~/.ssh/id_ed25519.pub";
          };
          extraConfig = {
            gpg.format = "ssh";
            maintenance = {
              auto = "false";
              strategy = "incremental";
            };
            # ref: https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/
            rebase = {
              updateRefs = true;
              autoStash = true;
              autoSquash = true;
            };
            fetch = {
              prune = true;
              pruneTags = true;
              all = true;
            };
            merge.autoStash = true;
            init.defaultBranch = "main";
            pull = {
              rebase = true;
            };
            protocol = {
              http.allow = "never";
              git.allow = "never";
            };
            credential.helper = "store";
            push = {
              autoSetupRemote = true;
              default = "current";
              followTags = true;
            };
            merge.mergiraf = {
              name = "mergiraf";
              driver = "mergiraf merge --git %O %A %B -s %S -x %X -y %Y -p %P";
            };
            url = {
              "https://github.com" = {insteadOf = "gh";};
              "https://gitlab.com" = {insteadOf = "gl";};
              "https://codeberg.org" = {insteadOf = "cb";};
            };
            # Ref: https://blog.gitbutler.com/how-git-core-devs-configure-git/
            column.ui = "auto";
            branch.sort = "-committerdate";
            tag.sort = "version:refname";
            help.autocorrect = "prompt";
            commit.verbose = true;
            rerere = {
              enabled = true;
              autoUpdate = true;
            };
          };
        };
        zsh = {
          enable = true;
          enableCompletion = true;
          autosuggestion.enable = true;
          autocd = true;
          syntaxHighlighting.enable = true;
          initExtra = ''
            function gedditdafuckouttahere () {
              git submodule deinit --force $1 ;
              rm -fr .git/modules/$1 ;
              git rm --force $1 ;
            }
            function llog { journalctl _SYSTEMD_INVOCATION_ID=$(systemctl show -p InvocationID --value $1) ; }
            if command -v nix-your-shell > /dev/null; then
              nix-your-shell zsh | source /dev/stdin
            fi
          '';
        };
      };
      editorconfig = {
        enable = true;
        settings = {
          "*" = {
            indent_size = 2;
            indent_style = "space";
          };
        };
      };
      home = {
        inherit (cfg) username;
        stateVersion = "22.11";

        sessionVariables = {
          # TODO: Remove if subsumed by silent = true
          DIRENV_LOG_FORMAT = "";
          AWS_EC2_METADATA_DISABLED = "true";
          EDITOR = "hx";
          # Required as our config file placement is tidier but nonstandard
          RIPGREP_CONFIG_PATH = "$HOME/.config/.ripgreprc";
          # This is annoying, ideally I'd set them all in .terraformrc but some options don't seem to be available
          TF_CLI_ARGS_plan = "-compact-warnings";
          TF_CLI_ARGS_apply = "-compact-warnings";
          TF_PLUGIN_CACHE_DIR = "$HOME/.terraform.d/plugin-cache";
          TF_CLI_CONFIG_FILE = "$HOME/.config/terraform/.terraformrc";
        };

        packages = with pkgs;
          [
            # The essentials
            dig
            wget
            netcat
            # Ref: https://github.com/ibraheemdev/modern-unix
            xh # curl replacement
            dog # dig replacement
            procs # ps replacement
            eget # github binary pull tool
            du-dust # du replacement
            duf # df replacement
            sd # sed replacement
            gping # ping replacement
            trippy # Ping TUI
            broot # tree + tui navigation
            choose # cut/awk replacement
            jless # json tui
            helix # editor/ide
            nnn # file manager
            yazi # file manager
            eza # exa is unmaintained
            nerd-fonts.fira-code # This actually makes it available to Alacritty
            cyme # lsusb replacement
            step-cli # Certificate tooling
            # Nix tooling
            nix-init
            nix-update
            nix-index
            nurl
            nix-bash-completions
            nix-your-shell
            # Kube stuff
            kubectl
            kubectl-neat
            kubectl-tree
            kubectl-ktop
            kubectl-df-pv
            kubectl-graph
            kubectl-klock
            kubectl-gadget
            kubectl-images
            kubectl-doctor
            kubectl-explore
            kubectl-view-secret
            stern
            # Lang servers
            nil # nix
            markdown-oxide # md
            terraform-ls # tf
            gopls
            # rust-analyzer # rust
            lldb
            alejandra # nix formatter
            dprint # formatting (esp MD)
            helm-ls
            yaml-language-server
            ansible-language-server
            vscode-langservers-extracted
            dockerfile-language-server-nodejs
            docker-compose-language-service
            jq-lsp
            buf
            nixd
            ruff
            # jj VCS
            jujutsu
            gg-jj
            # diff tool
            mergiraf
            arichtman.mamediff
            # langs
            rustup
            # Ref: https://terminaltrove.com
          ]
          ++ lib.optionals (!pkgs.stdenv.isAarch64) [
            trippy
            rsync
            # dockutil
            gawk
          ]
          ++ lib.optionals (!pkgs.stdenv.hostPlatform.isDarwin) [
            yubikey-manager
            yubioath-flutter
            yubikey-touch-detector
            yubikey-personalization-gui
          ];
        file =
          # Ref: https://github.com/phip1611/nixos-configs/blob/main/common/modules/user-env/env/cargo.nix
          createCargoBinSymlinks config.lib.file.mkOutOfStoreSymlink cargoSymlinkBins
          // {
            ".config/helix" = {
              source = ./helix;
              recursive = true;
            };
            ".config/.ripgreprc".text = "--glob=!**/*.svg";
            ".cargo/config.toml".source = cargo/config.toml;
            ".cargo/env".source = dummyCargoEnvFile;
            ".config/terraform" = {
              source = ./terraform;
              recursive = true;
            };
            # Required to create empty directory for Terraform plugin cache since TF won't create if not exist 🙄
            # https://github.com/nix-community/home-manager/issues/2104
            ".terraform.d/plugin-cache/.keep".text = "";
            ".dprint.jsonc".text = builtins.toJSON (import ./dprint.nix {inherit pkgs;});
            # ".dprint.jsonc".text = builtins.toJSON (pkgs.callPackage ./dprint.nix {inherit pkgs; });
          };
        sessionPath = ["/home/${cfg.username}/.cargo/bin"];

        enableNixpkgsReleaseCheck = true;
        shellAliases = aliases.myAliases // aliases.classicalAliases;
      };
      # Darwin launchpad fixes
      # Ref: https://github.com/nix-community/home-manager/issues/1341#issuecomment-1870352014
    };
  }
